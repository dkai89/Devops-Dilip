Git 16-01-2025
sudo su -
PS1="Git $ "
ls -lrt
cd my_project_app
git branch
ls
git status
git log
git checkout feature-1
ls
git status
git log
touch FB2.txt
git add FB2.txt
git commit -m "Added file at FB"
git status
git log
git branch
git status
git checkout master
ls
touch master.txt
ls
git add master.txt
git commit -m "Added file at MASTER"
git status
git log
ls
git merge feature_1
Merge of MASTER and FB kind of 2 way merge

git log
ls
cat FB2.txt
git branch
echo "This is MASTER line" > FB2.txt
cat FB2.txt
git add FB2.txt
git commit -m "Added line at MASTER"
git status
git checkout feature-1
ls
cat FB2.txt
echo "This is FB line" > FB2.txt
git add .
git commit -m "Added line at FB"
git status
ls
git branch
git checkout master
ls
git status
git merge feature-1
nano FB2.txt
nano FB2.txt [write here ( This is my new CODE. I'll take this code in production
)

git merge feature-1
git status
git add FB2.txt
git commit -m "My Latest code added"
git status
(cmd 42.31) sir kuch command chalaye
git config --help (47:40)
git config --help 
 CMD(58:15) pwd chalaya
ls (cmd)
git push -u projectAmain(1:06:12 (ON CMD))
ls (ON CMD)
touch 1.txt 2.txt  (ON CMD)
ls (ON CMD)
git add .    (ON CMD)
git commit -m "Added 2 files"      V
git push -u projectA main (1:10:15) ash pash sir ne git uplaod karna bataya hai on browser.   (ON CMD)
git fetch (ON CMD)
git pull   (ON CMD)
ls          (ON CMD)
cat mycode.py       (ON CMD)
git status           (ON CMD)
git log               (ON CMD)
git fetch (ON CMD)


ONCE AGAIN [ ON PUTTY ]
cd
git clone https://github.com/discover-devops/12thjan2025.git
cd 12thjan2025
ls
cat code.py [ ON PUTTY ]
(ON CMD)
git fetch  (ON CMD)
git remote  (ON CMD)
git remote -v (ON CMD)
[ON PUTTY]
cd
mkdir git-reset-demo
pwd
ls
cd git-reset-demo
ls
ls -lart
git init
git config --global user.name "Dilipkumar"
git config --global user.email "kumardilip19828979@gmail.com"
git config --global core.editor "notepad"
git config --list
git init
echo "Initial content" > example.txt
git add example.txt
git commit -m "Initial commit"
cat example.txt
git status
echo "Some new content" >> example.txt
git add example.txt
git commit -m "Added some new content"
cat example.txt
echo "Additional content" >> example.txt
git add example.txt
git commit -m "Added additional content"
cat example.txt
git log --oneline
git status
git reset --soft HEAD~1
git status
ls
cat example.txt
git log --oneline
cat example.txt
git add example.txt
git commit -m "AFTER SOFT"
git log --oneline
cat example.txt
git status
git reset --mixed HEAD~1
git status
cat example.txt
git add example.txt
git commit -m "MIXED"
git log --oneline
cat example.txt
git status
echo "Final content" >> example.txt
git add example.txt
git commit -m "Final content added"
cat example.txt
git log --oneline
git reset --hard HEAD~1
git log --oneline
git status
cd
mkdir git-restore-demo
cd git-restore-demo
git init

git config --global user.name "Dilipkumar"
git config --global user.email "kumardilip19828979@gmail.com"
git config --global core.editor "notepad"
git config --list

git init
echo "Hello, Git!" > example.txt
git add example.txt
git commit -m "Initial commit with example.txt"
cat example.txt
echo " this is a new line." >> example.txt
git status
cd
ls -lrt
rm -rf git-restore-demo
mkdir git-restore-demo
cd git-restore-demo
git init

ls
echo "Hello, Git!" > example.txt
git add example.txt
git commit -m "Initial commit with example.txt"
git status
echo "This is a new line." >> example.txt
git status
git log --oneline
git restore example.txt
git status
cat example.txt
echo "Another new line." >> example.txt
cat example.txt
git status
git add example.txt
git status
git restore --staged example.txt
git status
git restore example.txt
git status
cat example.txt
git log --oneline
echo "This is 2nd line" >> example.txt
cat example.txt
git add example.txt
git commit -m "Added2nd line"
git log --oneline
git restore --source=3664cec example.txt (id is downside)
git status








