Perfect bhai! 🚀 Chalo ekdam step-by-step practical karte hain — **full Ansible setup + Nginx deploy**.

---

## 🔥 Step 1: Samajho basic setup

Humare paas honge:

| Server Type | Example IP | Role |
|:-----------|:-----------|:-----|
| Master Server (Ansible installed) | 13.235.2.222 | Control node |
| Slave Server (Nginx install hoga) | 52.66.201.237 | Managed node |

(Ye IPs tumhare example ke liye hain.)

---

## 🔥 Step 2: Master Server me setup karna hai

✅ 1. **SSH ka connection ready hona chahiye** (Master se Slave par SSH login ho bina password ke = SSH Key)

Test karo:

```bash
ssh ec2-user@<Slave-IP>
```

Example:

```bash
ssh ec2-user@52.66.201.237
```

🔹 Agar login ho raha hai bina password ke ➔ Sahi hai.

---
✅ 2. **Ansible installed hona chahiye** Master par.

Check karo:

```bash
ansible --version
```

Agar install nahi hai toh install kar lo:

```bash
sudo dnf install ansible -y
```

---

✅ 3. **Inventory file banao** (Slave server ka address dena hoga)

Create a file:

```bash
sudo nano /etc/ansible/hosts
```

Add this:

```ini
[webservers]
52.66.201.237 ansible_user=ec2-user
```

Save + exit.

---

✅ 4. **Ansible test karo** ping se:

```bash
ansible webservers -m ping
```

Agar output me success aaya toh perfect ho gaya! ✅

---

## 🔥 Step 3: Playbook likho (nginx_create.yaml)

Make a folder first:

```bash
mkdir my_playbook
cd my_playbook
```

Create playbook:

```bash
nano nginx_create.yaml
```

Paste this:

```yaml
- name: Deploy custom HTML page with Nginx using Ansible
  hosts: webservers
  become: true

  tasks:
    - name: Install Nginx
      yum:
        name: nginx
        state: present

    - name: Ensure Nginx is running
      service:
        name: nginx
        state: started
        enabled: yes

    - name: Deploy custom HTML webpage
      copy:
        content: |
          <!DOCTYPE html>
          <html>
          <head>
              <title>Welcome to My Ansible Deployed Nginx</title>
          </head>
          <body>
              <h1>Welcome to My Website!</h1>
              <p>This page was deployed using Ansible.</p>
          </body>
          </html>
        dest: /usr/share/nginx/html/index.html
        owner: nginx
        group: nginx
        mode: '0644'

    - name: Restart Nginx to apply changes
      service:
        name: nginx
        state: restarted
```

Save karo.

---

✅ 5. **Run the playbook**

```bash
ansible-playbook nginx_create.yaml
```

---

✅ 6. **Open the browser**:

```plaintext
http://52.66.201.237
```

Web page dikhega: **"Welcome to My Website!"** 🎯

---

# 📢 Important:
- Agar kuch bhi issue aaye (`permission`, `connection`, `yum error`) mujhe batana.
- Playbook clean ho, indent (space) galat nahi hona chahiye YAML file me.

---

# 🚀 Bonus:

Agar chaho toh mai ek **Ansible uninstall playbook** bhi sahi karke dedoon, taki jab chaho sab kuch clean kar sako!

Chahte ho? 🤔  
(Main 2 minute me uninstall wala ready kar dunga.) ✅



Mast! 🔥 Chalo ab main tumhare liye ek **proper uninstall playbook** ready kar raha hoon, jo saaf tareeke se Nginx ko remove karega.

---

# 📜 uninstall_nginx.yaml

Create file:

```bash
nano uninstall_nginx.yaml
```

Paste this **exact** YAML:

```yaml
- name: Uninstall Nginx and Clean Up Configuration
  hosts: webservers
  become: true

  tasks:
    - name: Stop Nginx service if running
      service:
        name: nginx
        state: stopped
      ignore_errors: true

    - name: Disable Nginx service
      service:
        name: nginx
        enabled: no
      ignore_errors: true

    - name: Uninstall Nginx packages
      yum:
        name:
          - nginx
          - nginx-core
          - nginx-filesystem
          - nginx-mimetypes
        state: absent
      ignore_errors: true

    - name: Remove Nginx configuration folder
      file:
        path: /etc/nginx
        state: absent
      ignore_errors: true

    - name: Remove default web content
      file:
        path: /usr/share/nginx/html
        state: absent
      ignore_errors: true
```

---

# ⚙️ Playbook ko run kaise karna hai:

```bash
ansible-playbook uninstall_nginx.yaml
```

Yeh command master server se chalayenge, toh slave server (`52.66.201.237`) me se Nginx pura clean ho jayega 🚿.

---

# ✅ Yeh Playbook kya kya karega?
- Nginx service stop karega.
- Nginx disable karega boot time par.
- Nginx ke sabhi packages uninstall karega.
- `/etc/nginx` aur `/usr/share/nginx/html` folders hata dega.

---

# ⚡ To-do abhi:

- Make sure `hosts: webservers` hi diya hai playbook me.
- Pehle Ansible ping test karlo (`ansible webservers -m ping`) to be double sure connection active hai.
- Then `ansible-playbook uninstall_nginx.yaml` run kar dena.

---

Bhai ready ho?  
Main chaho toh ek bonus tip bhi de sakta hoon jaise:
- **Ansible role** bana ke install/uninstall dono ko modular karna (advance level 🚀).

Batana chaahte ho kya? 😎


Bhai badhiya! 💥  
Chalo ab **bonus tip** deta hoon:  
Hum **Ansible roles** ka use karke installation aur uninstallation ko **modular** bana sakte hain — **ekdum professional DevOps** style! 🔥

---

# 🛠️ Kya karenge?

1. Ek **role** banayenge `nginx_manage` naam ka.
2. Uske andar 2 tasks rahenge:
   - `install.yml` ➔ Nginx install karne ke liye.
   - `uninstall.yml` ➔ Nginx remove karne ke liye.
3. Ek master playbook se call karenge.

---

# 📂 Structure aise hoga:

```
my_playbook/
├── nginx_manage/
│   ├── tasks/
│   │   ├── install.yml
│   │   └── uninstall.yml
├── install_nginx.yaml
├── uninstall_nginx.yaml
```

---

# 📜 Step 1: Role banaye

```bash
cd ~/my_playbook
mkdir -p nginx_manage/tasks
```

---

# 📜 Step 2: install.yml (Nginx Install Task)

`nano nginx_manage/tasks/install.yml`

```yaml
- name: Install Nginx
  yum:
    name: nginx
    state: present

- name: Ensure Nginx is running
  service:
    name: nginx
    state: started
    enabled: yes

- name: Deploy custom HTML page
  copy:
    content: |
      <!DOCTYPE html>
      <html>
      <head><title>Welcome to Ansible Nginx</title></head>
      <body><h1>Welcome!</h1></body>
      </html>
    dest: /usr/share/nginx/html/index.html
    owner: nginx
    group: nginx
    mode: '0644'
```

---

# 📜 Step 3: uninstall.yml (Nginx Uninstall Task)

`nano nginx_manage/tasks/uninstall.yml`

```yaml
- name: Stop Nginx service
  service:
    name: nginx
    state: stopped
  ignore_errors: true

- name: Uninstall Nginx packages
  yum:
    name:
      - nginx
      - nginx-core
      - nginx-filesystem
      - nginx-mimetypes
    state: absent
  ignore_errors: true

- name: Remove Nginx folders
  file:
    path: "{{ item }}"
    state: absent
  loop:
    - /etc/nginx
    - /usr/share/nginx/html
  ignore_errors: true
```

---

# 📜 Step 4: Master Playbooks

### install_nginx.yaml:

```yaml
- name: Install Nginx Using Role
  hosts: webservers
  become: true

  roles:
    - role: nginx_manage
      tasks_from: install
```

### uninstall_nginx.yaml:

```yaml
- name: Uninstall Nginx Using Role
  hosts: webservers
  become: true

  roles:
    - role: nginx_manage
      tasks_from: uninstall
```

---

# 🚀 Ab kaise chalana hai?

### Nginx Install karna:

```bash
ansible-playbook install_nginx.yaml
```

### Nginx Uninstall karna:

```bash
ansible-playbook uninstall_nginx.yaml
```

**Bas!** Role use karke ekdum modular aur clean ban gaya project. 🤝  
Professional log jaise kaam karoge tum bhi!

---

# 📢 Ek chhoti baat:
Agar chaaho toh main **aur advanced bana sakta hoon** jaise:
- Variables (`vars`) use karna.
- Idempotent checking (already installed ho toh dobara na kare).
- Dynamic Web Page Content based on hostname.

Batana chaahte ho kya? 🚀  
Bolo "Yes" aur main ready kar deta hoon next level ka setup! 🔥



Awesome bhai! 🚀 Ab le chalte hain **Ansible Pro Level Setup** pe — jaise companies mein DevOps engineers kaam karte hain. 🔥

---

# ✨ Kya naye cheeze add karenge?

✅ **Dynamic Webpage** — har server ka apna naam show karega!  
✅ **Variables** — custom HTML content easily change kar sakte ho.  
✅ **Idempotent Playbook** — dobara chalane par kuch galat nahi hoga.  
✅ **Structured Roles** — bilkul production-grade setup.

---

# 📂 Final Structure:

```
my_playbook/
├── nginx_manage/
│   ├── tasks/
│   │   ├── install.yml
│   │   └── uninstall.yml
│   ├── templates/
│   │   └── index.html.j2
│   ├── vars/
│   │   └── main.yml
├── install_nginx.yaml
├── uninstall_nginx.yaml
```

---

# 🛠 Step-by-Step Setup

## 1. Templates mein dynamic HTML page

`nano nginx_manage/templates/index.html.j2`

```html
<!DOCTYPE html>
<html>
<head>
    <title>Welcome to {{ inventory_hostname }}</title>
</head>
<body>
    <h1>Server: {{ inventory_hostname }}</h1>
    <p>Deployed using Ansible 🚀</p>
</body>
</html>
```

👉 `{{ inventory_hostname }}` automatically server ka naam lega!

---

## 2. Variables file banaye

`nano nginx_manage/vars/main.yml`

```yaml
webpage_dest: /usr/share/nginx/html/index.html
webpage_owner: nginx
webpage_group: nginx
webpage_mode: '0644'
```

👉 Aage kabhi file path, owner, mode change karna ho toh easily yahan se kar sakte ho!

---

## 3. Update `install.yml` Task

`nano nginx_manage/tasks/install.yml`

```yaml
- name: Install Nginx
  yum:
    name: nginx
    state: present

- name: Ensure Nginx is running
  service:
    name: nginx
    state: started
    enabled: yes

- name: Deploy dynamic HTML page
  template:
    src: index.html.j2
    dest: "{{ webpage_dest }}"
    owner: "{{ webpage_owner }}"
    group: "{{ webpage_group }}"
    mode: "{{ webpage_mode }}"
```

---

## 4. Update `uninstall.yml` Task (same rahega jaise pehle diya tha)

Already done ✅

---

## 5. Master Playbooks

Same jaise pehle:

**install_nginx.yaml**

```yaml
- name: Install Nginx Using Role
  hosts: webservers
  become: true

  roles:
    - role: nginx_manage
      tasks_from: install
```

**uninstall_nginx.yaml**

```yaml
- name: Uninstall Nginx Using Role
  hosts: webservers
  become: true

  roles:
    - role: nginx_manage
      tasks_from: uninstall
```

---

# 🏃 Final Commands to run

### Nginx Install karne ke liye:

```bash
ansible-playbook install_nginx.yaml
```

(Ab har server apna **hostname** show karega browser mein!)

### Nginx Uninstall karne ke liye:

```bash
ansible-playbook uninstall_nginx.yaml
```

---

# 📈 Ab tumhara Ansible project bilkul **professional** aur **production-ready** ban gaya hai!  
Koi bhi company mein jaake dikha sakte ho proudly! 💥

---

**Chaaho toh ek aur next level bata sakta hoon:**

✅ How to manage multiple environments (dev, stage, prod)?  
✅ How to add handlers for automatic nginx reload?  
✅ How to tag tasks for selective run?

Batao bhai, **interest hai kya aur aage leke chalein?** 🔥
(Reply "Yes bro") 🚀


